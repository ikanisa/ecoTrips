const STATIC_CACHE="static-v1";const API_CACHE="api-v1";const INVENTORY_CACHE="inventory-v1";self.addEventListener("install",event=>{event.waitUntil(caches.open(STATIC_CACHE).then(cache=>cache.addAll(["/","/manifest.json"])))});self.addEventListener("activate",event=>{event.waitUntil(caches.keys().then(keys=>Promise.all(keys.filter(key=>![STATIC_CACHE,API_CACHE,INVENTORY_CACHE].includes(key)).map(key=>caches.delete(key)))))});self.addEventListener("fetch",event=>{const request=event.request;const url=new URL(request.url);if(request.method!=="GET"){return}if(url.pathname.startsWith("/functions/v1/inventory-search")){event.respondWith(cacheFirst(event.request,INVENTORY_CACHE,600000));return}if(url.pathname.startsWith("/functions/v1/")){event.respondWith(networkFirst(event.request,API_CACHE));return}event.respondWith(staleWhileRevalidate(event.request,STATIC_CACHE))});async function cacheFirst(request,cacheName,maxAgeMs){const cache=await caches.open(cacheName);const cached=await cache.match(request);if(cached){const dateHeader=cached.headers.get("sw-fetched-at");if(dateHeader&&Date.now()-Number(dateHeader)<maxAgeMs){return cached}}const response=await fetch(request);cache.put(request,stamp(response));return response}async function networkFirst(request,cacheName){const cache=await caches.open(cacheName);try{const response=await fetch(request);cache.put(request,stamp(response));return response}catch(error){const cached=await cache.match(request);if(cached)return cached;throw error}}async function staleWhileRevalidate(request,cacheName){const cache=await caches.open(cacheName);const cached=await cache.match(request);const networkPromise=fetch(request).then(response=>{cache.put(request,stamp(response));return response});return cached||networkPromise}function stamp(response){const clone=response.clone();const headers=new Headers(clone.headers);headers.set("sw-fetched-at",Date.now().toString());return new Response(clone.body,{status:clone.status,statusText:clone.statusText,headers})}
